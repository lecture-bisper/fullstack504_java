public class CarEx {

  public static void main(String[] args) {

//    Car 클래스 타입의 객체 myCar 생성
    Car myCar = new Car();
//    객체 myCar의 멤버인 keyTurnOn(), run() 메소드를 호출
//    Car 클래스 외부에서 실행하기 때문에 keyTurnOn(), run() 메소드 호출 시 객체명이 추가되어 있음
    myCar.keyTurnOn();
    myCar.run();

//    객체 myCar의 멤버인 getSpeed() 메소드를 호출하여 현재 속도를 가져옴
    int speed = myCar.getSpeed();
    System.out.println("현재 속도 : " + speed + "km/s");


//    메소드의 4가지 형태
//    메소드는 매개변수와 반환값의 유무에 따라서 4가지 형태가 존재함

//    1. 매개변수와 반환값이 모두 없는 형태
//    매개변수가 없기 때문에 연산 시 필요한 데이터를 메소드 내부에서 선언하고 사용하고 삭제함
//    메소드의 연산 결과가 늘 동일함
//    반환값이 없기 때문에 메소드의 연산 결과를 메소드 내부에서 출력
//    메소드의 연산 결과를 외부에서 사용할 수 없음
//    void plus() { ... }

//    2. 매개변수는 있고, 반환값이 없는 형태
//    매개변수가 있기 때문에 연산 시 필요한 데이터를 외부에서 전달받음
//    메소드 외부에서 연산 시 필요한 데이터를 전달받아 연산하기 때문에 연산 결과가 달라짐
//    반환값이 없기 때문에 메소드의 연산 결과를 메소드 내부에서 출력
//    메소드의 연산 결과를 외부에서 사용할 수 없음
//    void plus(int x, int y) { ... }

//    3. 매개변수는 없고, 반환값은 있는 형태
//    매개변수가 없기 때문에 연산 시 필요한 데이터를 메소드 내부에서 선언하고 사용하고 삭제함
//    전달받은 데이터가 없기 때문에 연산 결과가 동일함
//    반환값이 존재하기 때문에 연산 결과를 메소드 외부에서 출력
//    메소드의 연산 결과를 외부에서 활용할 수 있음
//    int plus() { ...  return 결과; }

//    4. 매개변수와 반환값이 모두 있는 형태
//    매개변수가 있기 때문에 연산 시 필요한 데이터를 외부에서 전달받음
//    전달받은 데이터에 의해서 연산 결과가 달라짐
//    반환값이 존재하기 때문에 연산 결과를 메소드 외부에서 출력
//    메소드의 연산 결과를 외부에서 활용할 수 있음
//    int plus(int x, int y) { ... return 결과; }
  }
}












